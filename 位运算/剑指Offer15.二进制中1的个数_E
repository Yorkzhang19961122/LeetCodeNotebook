【题目】

请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

【示例】

```c++
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
```

---

【题解思路1—与运算逐位判断】

根据与运算的性质，设二进制数字n，则有：

* 若n&1 = 0，则n二进制**最右一位**为0；

* 若n&1 = 1，则n二进制最右一位为1.

考虑到以上的特性，采用循环判断的方法：

1.判断n最右一位是否为1，根据结果计数

2.将n右移一位，继续判断

【题解代码1—与运算逐位判断】

```c++
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        while(n != 0){
            if(n&1 == 1) count++;  //n与1，判断结果是否为1，根据结果改变count
            n >>= 1;   //n右移一位
        }
        return count;
    }
};
```

【题解思路2—巧用n&(n-1)】

* (n-1)：二进制数字n最右边的1变成0，此1右边的0都变成1
* n&(n-1)：二进制数字n最右边的1变成0，其余不变  

借助这一特点，循环将n最右边的1消为0，并且记录1消为0的次数，此即为二进制数n中1的数量。

【题解代码2_巧用n&(n-1)】

```c++
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count = 0;
        while(n != 0){
            count++;  //每消一次1，count加1
            n &= n - 1;  //消去n最右边的1
        }
        return count;
    }
};
```

